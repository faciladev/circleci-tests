version: 2.1

orbs:
  slack: circleci/slack@4.1

parameters:
  workflow_id:
    type: string
    default: ${CIRCLE_WORKFLOW_ID:0:7}

  kv-key:
    type: string
    default: xqzlp7yq

commands:
  destroy-environment-on-fail:
    description: Destroy AWS provisioned resources on fail
    steps:
      - run:
          name: Destroy environments on fail
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name "testec2-<< pipeline.parameters.workflow_id >>"

  slack-notify-on-fail:
    description: Notify via slack on fail
    steps:
      - slack/notify:
          channel: C03NW4N9HDF
          event: fail
          template: basic_fail_1

jobs:
  # create-infrastructure:
  #   docker:
  #     - image: amazon/aws-cli
  #   steps:
  #     - checkout
  #     - run:
  #         name: "Setup EC2 instance"
  #         command: |
  #           aws cloudformation deploy \
  #             --template-file infra/backend.yml \
  #             --tags project=testing \
  #             --stack-name "testec2-<< pipeline.parameters.workflow_id >>" \
  #             --parameter-overrides ID="<< pipeline.parameters.workflow_id >>"

  #     - destroy-environment-on-fail
  #     - slack-notify-on-fail

  # create-prometheus-server:
  #   docker:
  #     - image: amazon/aws-cli
  #   steps:
  #     - checkout
  #     - run:
  #         name: "Setup EC2 instance"
  #         command: |
  #           aws cloudformation deploy \
  #             --template-file infra/prometheus.yml \
  #             --tags project=testing \
  #             --stack-name "testec2-<< pipeline.parameters.workflow_id >>" \
  #             --parameter-overrides ID="<< pipeline.parameters.workflow_id >>"

      # - destroy-environment-on-fail
      # - slack-notify-on-fail

  # update-inventory-file:
  #   docker:
  #     - image: amazon/aws-cli
  #   steps:
  #     - checkout
  #     - run:
  #         name: Install tar and gzip
  #         command: |
  #           yum install -y tar gzip

  #     - run:
  #         name: Add back-end ip to ansible inventory
  #         command: |
  #           aws ec2 describe-instances \
  #             --filters Name=tag:Name,Values=testec2-<< pipeline.parameters.workflow_id >> \
  #             --query 'Reservations[*].Instances[*].PublicIpAddress' \
  #             --output text | cat >> .circleci/ansible/inventory.txt
  #           cat .circleci/ansible/inventory.txt

  #     - persist_to_workspace:
  #         root: ~/
  #         paths:
  #           - project/.circleci/ansible/inventory.txt

  #     - destroy-environment-on-fail

  # configure-prom-server:
  #   docker:
  #     - image: cimg/python:3.9.11
  #   steps:
  #     - checkout
  #     - attach_workspace:
  #         at: ~/
  #     - run:
  #         name: Install ansible
  #         command: |
  #           pip3 install awscli
  #           pip3 install ansible

  #     - run:
  #         name: Run playbook
  #         command: |
  #           cd .circleci/ansible
  #           ansible-playbook -i inventory.txt deploy-prometheus.yml

  #     - destroy-environment-on-fail


### CONFIGURING POSTGRES WITH ANSIBLE
  # postgres-test:
  #   docker:
  #     - image: cimg/python:3.9.11
  #   steps:
  #     - checkout
  #     - run:
  #         name: install ansible
  #         command: pip3 install ansible
  #     - run:
  #         name: Install postgres
  #         command: |
  #           cd .circleci/ansible
  #           ansible-playbook -i proxy_inventory.txt setup-postgres.yml -vv

### CONFIGURING POSTGRES ON DOCKER

  setup-postres-docker:
    docker:
      - image: cimg/python:3.9.11
    steps:
      - checkout
      # - restore_cache:
      #     keys: [venv]
      - run:
          name: Install Postgres
          command: |
            sudo apt update
            sudo apt install postgresql postgresql-contrib
            pg_ctlcluster 12 main start
      - run:
          name: Create PG db, user and password
          command: |
            sudo psql postgres
            create database ${POSTGRES_DB};
            create user ${POSTGRES_USER} with encrypted password '${POSTGRES_PASSWORD}';
            grant all privileges on database ${POSTGRES_DB} to ${POSTGRES_USER};
            \q
      - run:
          name: Test connection
          command: |
            sudo psql -d ${POSTGRES_DB} -U ${POSTGRES_USER}
            \dt
            \q


  

  # get-ip-address:
  #   docker:
  #     - image: amazon/aws-cli

  #   steps:
  #     - checkout
  #     - run:
  #         name: Get EC2 Ip address
  #         command: |
  #           echo "export BACKEND_IP=$(aws ec2 describe-instances --filters Name=tag:Name,Values=testec2-<< pipeline.parameters.workflow_id >> --query 'Reservations[*].Instances[*].PublicIpAddress' --output text)" >> ${BASH_ENV}
  #           source ${BASH_ENV}
  #           echo "This is the backend IP: ${BACKEND_IP}"
  #     - run:
  #         name: Check if IP still available
  #         command: |
  #           echo ${BACKEND_IP}
  #           exit 1

  #     - destroy-environment-on-fail
      # - destroy-environment-on-pass

  # build-backend:
  #   docker:
  #     - image: circleci/node:13.8.0
  #   steps:
  #     - checkout
  #     - restore_cache:
  #         keys: [backend-build]
  #     - run:
  #         name: Back-end build
  #         command: |
  #           cd backend
  #           npm install
  #           npm run build
  #     - save_cache:
  #         key: backend-build
  #         paths: [backend/node_modules]

      # - destroy-environment-on-fail

  # configure-backend-server:
  #   docker:
  #     - image: cimg/python:3.8.13-node
  #   steps:
  #     - checkout
  #     - restore_cache:
  #         keys: [backend-build]
  #     - run:
  #         name: Install dependencies
  #         command: |
  #           pip3 install awscli

  #     - run:
  #         name: Inspect folder
  #         command: |
  #           ls -a ~/project/backend

      # - run:
      #     name: Configure server
      #     command: |
      #       cd .circleci/ansible
      #       ansible-playbook -i inventory.txt configure-server.yml

      # - destroy-environment-on-fail

  # run-migrations:
  #   docker:
  #     - image: circleci/node:13.8.0
        
  #   steps:
  #     - checkout
  #     - restore_cache:
  #         keys: [backend-build]
  #     - run:
  #         name: Install dependencies
  #         command: |
  #           sudo apt update
  #           sudo apt install -y awscli

  #     - run:
  #         name: Run migrations
  #         command: |
  #           cd backend
  #           npm install
  #           echo "About to run migrations"
  #           npm run migrations > migrations_dump.txt
  #           echo "Cat of migrations.dump:\n $(cat ~/project/backend/migrations_dump.txt)"

  #     - run:
  #         name: Send migration results to keyvalue.immanuel.co
  #         command: |
  #           if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
  #           then
  #             curl -H "content-length: 0" -X POST https://keyvalue.immanuel.co/api/KeyVal/UpdateValue/<< pipeline.parameters.kv-key >>/migration_<< pipeline.parameters.workflow_id >>/1
  #           elif grep -q "No migrations are pending" ~/project/backend/migrations_dump.txt
  #           then
  #             curl -H "content-length: 0" -X POST https://keyvalue.immanuel.co/api/KeyVal/UpdateValue/<< pipeline.parameters.kv-key >>/migration_<< pipeline.parameters.workflow_id >>/1
  #           else
  #             exit 1
  #           fi

  #     - persist_to_workspace:
  #         root: ~/
  #         paths:
  #           - project/backend/migrations_dump.txt
     
      # - destroy-environment-on-fail

  # format-ip-address:
  #   docker:
  #     - image: amazon/aws-cli

  #   steps:
  #     - checkout
  #     - run:
  #         name: Install tar and gzip
  #         command: |
  #           yum install -y tar gzip
  #     - run:
  #         name: Get EC2 Ip address
  #         command: |
  #           BACKEND_IP=$(aws ec2 describe-instances \
  #             --filters Name=tag:Name,Values=testec2-<< pipeline.parameters.workflow_id >> \
  #             --query 'Reservations[*].Instances[*].PublicIpAddress' \
  #             --output text)
  #           echo "This is the backend ip address: ${BACKEND_IP}"
  #           echo "API_URL=${BACKEND_IP}:3030" > .env
  #           echo "This is the API_URL: $(cat ~/project/.env)"

  #     - run:
  #         name: Check if folder has .env
  #         command: |
  #           pwd
  #           echo "This is still the API_URL: $(cat ~/project/.env)"
  #           ls -a

  #     - persist_to_workspace:
  #         root: ~/
  #         paths:
  #           - project/.env

  #     - destroy-environment-on-fail

  # retrieve-api-url:
  #   docker:
  #     - image: amazon/aws-cli

  #   steps:
  #     - checkout
  #     - run:
  #         name: Install tar and gzip
  #         command: |
  #           yum install -y tar gzip
  #     - attach_workspace:
  #         at: ~/
  #     - run:
  #         name: Retrieve API URL
  #         command: |
  #           echo "This is the retrieved API_URL: $(cat ~/project/.env)"

  #     - destroy-environment-on-fail
  #     - destroy-environment-on-pass

      # - persist_to_workspace:
      #     root: ~/
      #     paths:
      #       - project/.env

  # archive-infra-folder:
  #   docker:
  #     - image: cimg/python:3.8.13
  #   steps:
  #     - checkout
  #     - add_ssh_keys:
  #         fingerprints: ["1d:83:9d:af:35:e2:5b:9c:ae:3c:89:6b:43:be:ef:4e"]
  #     - attach_workspace:
  #         at: ~/
  #     - run:
  #         name: Install AWSCLI and Ansible
  #         command: |
  #           pip3 install awscli
  #           pip3 install ansible
  #     - run:
  #         name: Archive folder
  #         command: |
  #           printenv
  #           printenv > ./infra/.env
  #           echo "before zip: $(ls ./infra -a)"
  #           tar -C infra -czvf artifact.tar.gz .
  #           cd .circleci/ansible
  #           ansible-playbook -i inventory.txt unarchive-infra.yml

  #     - destroy-environment-on-fail
  #     - destroy-environment-on-pass
    
#   test-2:
#     docker:
#       - image: circleci/node:13.8.0

#     steps:
#         - checkout
#         - attach_workspace:
#           at: ~/
#         - run:
#             name: Check if file was updated
#             command: |
#               cat .circleci/ansible/inventory.txt

  # configure-infrastructure:
  #     docker:
  #       - image: cimg/python:3.7.13
  #     steps:
  #       - checkout
  #       - add_ssh_keys:
  #           fingerprints: ["1d:83:9d:af:35:e2:5b:9c:ae:3c:89:6b:43:be:ef:4e"] 

  #       - attach_workspace:
  #           at: ~/

  #       - run:
  #           name: Install dependencies
  #           command: |
  #             pip3 install ansible
  #             pip3 install --no-cache-dir awscli

  #       - run:
  #           name: Configure server
  #           command: |
  #             cd .circleci/ansible
  #             ansible-playbook -i inventory.txt configure-server.yml
        
  #       - destroy-environment-on-fail
  #       - destroy-environment-on-pass

  # check-image:
  #   docker:
  #     - image: cimg/python:3.8.13-node

  #   steps:
  #     - checkout
  #     - run:
  #         name: Check if npm exists
  #         command:
  #           npm --version

  # job-1:
  #   docker:
  #     - image: cimg/base:2021.11
  #   steps:
  #     - run:
  #         name: Export a variable
  #         command: |
  #           FOO="Bar"
  #           echo $FOO
  #           echo 'export CAMP=$FOO' >> $BASH_ENV
  #           source $BASH_ENV
  #           echo $CAMP

  #     - run:
  #         name: Get var
  #         command: |
  #           echo $CAMP

  # job-2:
  #   docker:
  #     - image: alpine:latest
  #   steps:
  #     - run:
  #         name: Retrieve previously exported variable
  #         command: |
  #           if [[ `echo ${FOO} == "Bar"` ]];
  #           then echo "Persisted across jobs";
  #           else echo "Not persisted across jobs";
  #           fi

workflows:
  test-workflow:
    jobs:
      - setup-postres-docker
      # - postgres-test
      # - create-prometheus-server
      # - check-image
      # - create-infrastructure
      # - update-inventory-file:
      #     requires:
      #       - create-prometheus-server
      # - configure-prom-server:
      #     requires:
      #       - update-inventory-file
      # - configure-infrastructure:
      #     requires:
      #       - update-inventory-file
      # - archive-infra-folder:
      #     requires:
      #       - update-inventory-file
            # - create-infrastructure
      # - job-1
      # - job-2:
      #     requires:
      #       - job-1
      # - get-ip-address:
      #     requires:
      #       - create-infrastructure
      # - format-ip-address:
      #     requires:
      #       - create-infrastructure
      # - retrieve-api-url:
      #     requires:
      #       - format-ip-address
      # - test-slack
      # - build-backend
      # - configure-backend-server:
      #     requires:
      #       - build-backend
      # - run-migrations:
      #     requires:
      #       - configure-backend-server


