---

# # Check environment variables
# - name: Check environment variables
#   shell: printenv
#   register: env_vars

# - name: Show environment vars
#   debug:
#     msg: "{{ env_vars.stdout_lines }}"

# # Ensure that the server is up to date
# - name: Update apt repo and cache on Ubuntu box
#   apt:
#     update_cache: yes
#     force_apt_get: yes
#     cache_valid_time: 3600

# - name: Upgrade all packages on servers
#   apt:
#     upgrade: dist
#     force_apt_get: yes

# # Install necessary packages
# - name: Install required packages
#   apt:
#     name:
#       - wget
#       - python3-psycopg2
#       - acl
#     state: latest

# # Set up Postgres 14 Repo
# - name: Set up Postgres 14 repo
#   shell: |
#     echo "deb http://apt.postgresql.org/pub/repos/apt $(lsb_release -cs)-pgdg main" > /etc/apt/sources.list.d/pgdg.list
#     wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add -
#   args:
#     warn: no

# #  Install Postgres 14 in Ubuntu
# - name: Install postgresql
#   apt:
#     name: postgresql-14
#     update_cache: yes
#   notify:
#     - Enable Postgresql

# # Configure Postgres 14
# - name: Ensure PostgreSQL is listening on *
#   lineinfile:
#     dest: /etc/postgresql/14/main/postgresql.conf
#     regexp: '^listen_addresses\s*='
#     line: "listen_addresses='*'"
#     state: present
#   notify: Restart Postgresql

# - name: Add new configuration to "pg_hba.conf"
#   blockinfile:
#     dest: /etc/postgresql/14/main/pg_hba.conf
#     block: |
#       host    all             all             0.0.0.0/0                md5
#       host    all             all             ::/0                     md5
#   notify: Restart Postgresql

# - name: Change peer identification to trust
#   shell: /bin/sed -i '/^local/s/peer/trust/' /etc/postgresql/14/main/pg_hba.conf
#   args:
#     warn: no
#   notify: Restart Postgresql

# # Create a Postgres Super User
# - name: Create a Superuser PostgreSQL database user
#   become: yes
#   become_user: postgres
#   vars:
#     ansible_ssh_pipelining: true
#   postgresql_user:
#     name: '{{ postgres_root_user }}'
#     password: '{{ postgres_root_pass }}'
#     role_attr_flags: CREATEDB,SUPERUSER,CREATEROLE
#     encrypted: yes
#     state: present

- name: Create a database
  become: true
  become_user: ubuntu
  postgresql_db:
    # login_user: '{{ postgres_root_user }}'
    # login_password: '{{ postgres_root_pass }}'
    name: '{{ postgres_db_name }}'
    state: present
